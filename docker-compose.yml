version: '3.8'

services:
  # Redis service for caching and rate limiting
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    networks:
      - tierlist_network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main application service
  tierlist:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-1.0.0}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    restart: unless-stopped
    ports:
      - "${HOST_PORT:-8080}:5000"
    environment:
      # Flask configuration
      - FLASK_ENV=docker
      - SECRET_KEY=${SECRET_KEY:-$(openssl rand -base64 32)}
      
      # Redis configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      - CACHE_REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/0
      - RATELIMIT_STORAGE_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379/1
      
      # Security settings
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-5242880}
      - MAX_FILES_PER_REQUEST=${MAX_FILES_PER_REQUEST:-10}
      - MAX_FILENAME_LENGTH=${MAX_FILENAME_LENGTH:-100}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Gunicorn settings
      - WEB_CONCURRENCY=${WEB_CONCURRENCY:-4}
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-4}
      - GUNICORN_THREADS=${GUNICORN_THREADS:-2}
      
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - tierlist_network
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Optional: Nginx reverse proxy for enhanced security
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - tierlist_network
    depends_on:
      tierlist:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  tierlist_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 